name: Test Suite

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Vet code
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -coverpkg=./... ./test

    - name: Check test coverage
      run: |
        go tool cover -func=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 45" | bc -l) )); then
          echo "Coverage is below 45%. Current coverage: ${COVERAGE}%"
          exit 1
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build application
      run: make build

    - name: Test Docker build
      run: docker build -t shipper-deployment-test .

  # lint:
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: '1.24'

  #   - name: golangci-lint
  #     uses: golangci/golangci-lint-action@v4
  #     with:
  #       version: latest
  #       args: --timeout=5m

  # security:
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: '1.24'

  #   - name: Run Gosec Security Scanner
  #     run: |
  #       go install github.com/securego/gosec/v2/cmd/gosec@latest
  #       gosec -fmt sarif -out results.sarif ./...

  #   - name: Upload SARIF file
  #     uses: github/codeql-action/upload-sarif@v3
  #     with:
  #       sarif_file: results.sarif
